class Game{constructor(e){this.loadGame()||(this.deckSize=e,this.deck=new Deck(e)),this.setupListeners(),new MessageHandler}setupListeners(){document.querySelector(".start").addEventListener("click",this.handleStart),document.querySelector(".shuffle").addEventListener("click",this.shuffle),document.querySelector(".finish").addEventListener("click",this.finish)}showMessage(e){let s=new CustomEvent("message",{detail:{message:e}});document.dispatchEvent(s),setTimeout((()=>{let e=new CustomEvent("clear-message");document.dispatchEvent(e)}),5e3)}start=()=>{};handleStart=()=>{this.showMessage("The game has begun!"),this.start()};shuffle=()=>{this.showMessage("Shuffling ..."),this.deck.shuffle(),this.showMessage("The deck has been shuffled"),this.saveGame()};deal(e){}addCardToBoard(e,s){const t=document.querySelector(".deck"),a=e.render(s);e.isPlayed=!0,t.appendChild(a),this.saveGame()}showAll(){this.cards.forEach((e=>{this.addCardToBoard(e)}))}saveGame(){localStorage.setItem("gameState",JSON.stringify({deck:this.deck,deckSize:this.deckSize}))}loadGame(){try{const e=JSON.parse(localStorage.getItem("gameState"));if(e&&e.deck)return this.deckSize=e.deckSize,this.deck=Deck().restore(e.deckSize,e.deck.cards,e.deck.discarded),this.deck.discarded.forEach((e=>this.addCardToBoard(e))),!0}catch(e){console.error("no game state")}return!1}}
//# sourceMappingURL=game.js.map