class Deck{DEFAULT_DECK_SIZE=52;deckSize=null;SUITS=["♥","♦","♣","♠"];RANKS=["A","2","3","4","5","6","7","8","9","10","J","Q","K"];constructor(s){this.deckSize=s||this.DEFAULT_DECK_SIZE,this.create()}static restore(s,r,t){const e=new Deck(s);return e.cards=r.map((s=>new Card(s.suit,s.rank,s.isVisible,s.isPlayed))),e.discarded=t.map((s=>new Card(s.suit,s.rank,s.isVisible,s.isPlayed))),this.cards=r,this.discarded=t,e}create(){this.cards=[],this.discarded=[],this.SUITS.forEach((s=>{this.RANKS.forEach((r=>{this.cards.push(new Card(s,r))}))}))}shuffle(){for(var s,r,t=this.cards.length;t;)r=Math.floor(Math.random()*t--),s=this.cards[t],this.cards[t]=this.cards[r],this.cards[r]=s;return this.cards}reset(){this.create()}deal(s){let r=[];for(let t=0;t<s;t++){const s=this.cards.pop();s.isPlayed=!0,this.discarded.push(s),r.push(this.cards.pop())}return r}}new Deck;
//# sourceMappingURL=deck.js.map